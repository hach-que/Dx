// --------------------------------------------------------------------------------------------------------------------
// <copyright file="IDirectInvoke.cs" company="Redpoint Software">
//   The MIT License (MIT)
//   
//   Copyright (c) 2013 James Rhodes
//   
//   Permission is hereby granted, free of charge, to any person obtaining a copy
//   of this software and associated documentation files (the "Software"), to deal
//   in the Software without restriction, including without limitation the rights
//   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//   copies of the Software, and to permit persons to whom the Software is
//   furnished to do so, subject to the following conditions:
//   
//   The above copyright notice and this permission notice shall be included in
//   all copies or substantial portions of the Software.
//   
//   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//   THE SOFTWARE.
// </copyright>
// <summary>
//   The direct invocation interface.
// </summary>
// --------------------------------------------------------------------------------------------------------------------
namespace Dx.Runtime
{
    using System.Reflection;

    /// <summary>
    /// The direct invocation interface.  This is used at runtime, and concrete implementations
    /// are generated by the Dx post-processor.  It provides a mechanism for directly calling
    /// methods without causing exceptions to be wrapped in TargetInvocationException.
    /// </summary>
    public interface IDirectInvoke
    {
        #region Public Methods and Operators

        /// <summary>
        /// Invoke the specified target method.
        /// </summary>
        /// <param name="method">
        /// The method to invoke.
        /// </param>
        /// <param name="instance">
        /// The instance to invoke against.
        /// </param>
        /// <param name="parameters">
        /// The parameters of the invocation.
        /// </param>
        /// <returns>
        /// The resulting object.
        /// </returns>
        object Invoke(MethodInfo method, object instance, object[] parameters);

        #endregion
    }
}